Weather Application - Course Project CS 361
Time spent: 65 hours
Start today:

SOCKETS
    gui_manager      - '127.0.0.3', 23458
    frontend_manager - '127.0.0.1', 23456
    forecast_service - '127.0.0.2', 23457

NEEDED DATA BY SERVICE/WIDGET
- Daily
    -Time
    -temp
    -Short Condition
    -Hi Lo
    -Rain %
    -Wind
- Hourly
    -temp
    -time
    -graphic
- Widget

== Create Short Forecast ==
skyCondition raw values:
    int : 0 - 100
skyCondition parsed values:
    0 - 12.5:
        day: sunny
        night: clear
    12.6 - 37.5:
        day: mostly_sunny
        night: mostly_clear
    37.6 - 62.5:
        day: partly_sunny
        night: partly_cloudy
    62.6 - 87.5:
        day/night: mostly_cloudy
    87.6 - 100:
        day/night: cloudy

skyCondition values:
    condition:
      "sunny",
      "clear",
      "mostly_sunny",
      "mostly_clear",
      "partly_sunny",
      "partly_cloudy",
      "mostly_cloudy",
      "cloudy"

Weather values:
    coverage:
      "areas",
      "brief",
      "chance",
      "definite",
      "few",
      "frequent",
      "intermittent",
      "isolated",
      "likely",
      "numerous",
      "occasional",
      "patchy",
      "periods",
      "scattered",
      "slight_chance",
      "widespread"
    weather:
      "blowing_dust",
      "blowing_sand",
      "blowing_snow",
      "drizzle",
      "fog",
      "freezing_fog",
      "freezing_drizzle",
      "freezing_rain",
      "freezing_spray",
      "frost",
      "hail",
      "haze",
      "ice_crystals",
      "ice_fog",
      "rain",
      "rain_showers",
      "sleet",
      "smoke",
      "snow",
      "snow_showers",
      "thunderstorms",
      "volcanic_ash",
      "water_spouts"
    intensity:
      "very_light",
      "light",
      "moderate",
      "heavy"
    attributes:
      "damaging_wind",
      "dry_thunderstorms",
      "flooding",
      "gusty_wind",
      "heavy_rain",
      "large_hail",
      "small_hail",
      "tornadoes"


parsed_weather_dict:
    if entry is PT3H, will copy entry 3x, for hour 04, 05, 06, for hourly forecasts
    2024-07-29T21:00:00+00:00/PT3H
    YYYY-MM-DD[T]HH:MM:SS+UTC+#/Period[T]3Hour
    split('T') = [2024-07-29, 21:00:00+00:00/P, 3H]
    {'2024-07-29': {
        '01': {
            {'0': {
                'coverage': 'chance',
                'weather': 'thunderstorms',
                'intensity': null,
                'visibility': null
            }, '1': {
                'coverage': 'chance',
                'weather': 'rain_showers',
                'intensity': 'light',
                'visibility': null
            }},
        '02': {...}...}}}


"weather"" {
      "values": [
        {
          "validTime": "2024-07-27T20:00:00+00:00/P2DT1H",
          "value": [
            {
              "coverage": null,
              "weather": null,
              "intensity": null,
              "visibility": {
                "unitCode": "wmoUnit:km",
                "value": null
              },
              "attributes": [

              ]
            }
          ]
        },




Message Handlers - Objects that services start threads of (their run() methods). Use inbound_queue[] and outbound_queue[]
    inbound_message_handler
    outbound_message_handler


 Message requests should be structured as following
 {
   "socket": [ip, port],
   "type": "request OR response",
   "service": "autocomplete OR geocoding OR ...",
   "data": data
 }


 WeatherManager object
 Starting by setting up all GUI vals as init private vals
 self.location
 self.hourly_widget = {0: {temp: x, time: y, graphic: z}, 1: {...}, ...}
 self.now_widget = {temp: 0, hi: 0, lo: 0, condition: 'x', graphic: 'haze', feels_like: 'z'}
 self.sunrise_widget = {sunrise: 6, sunset: 12, dawn: 10, dusk: 20}
 self.uv_widget = {uv_value: 0}
 self.wind_widget = {speed: 0, direction: 'N'}
 self.humidity_widget = {humidity: 0, dew: 50}
 self.pressure_widget = {pressure: 30}
 self.alert_widget = {active_alert: True, header: "Severe Weather Alert", body="High Wind", source="National Weather Service"}
 self.daily_widget = {0: {date: "Today", graphic: 'haze', condition: 'cloudy', hi: 80, lo: 60, rain: 30, wind_speed: 0, wind_direction = 'N'}, 1...}
 self.search_query = None



GUI Service TODO -- partially (pretty much) DONE --
Written using eel - HTML/CSS/JS Frontend - https://pypi.org/project/Eel/
Does not process anything - just takes and sends values and controls GUI
Accepts requests from frontend service?
Sends requests to frontend service?

 Writing First:
  Last Edit: 7/11/24
  Made sketch GUI in Figma, ported to HTML, partially adapted and refactored for better integration and utility
  Use gui_index.html and main.css
  Currently factored for 1280x720, might update for fullscreen/browser but for now not worth it
  TODO DONE Some shapes did not transfer over - uv widget, alert warning graphic, wind graphic
    if possible, implement proper icons from whatever site is called ---- https://react-icons.github.io/react-icons/

    # To call function from JS, must be outside obj (probably)
  Current Functionality:
    search query
    update location display
    Pretty much everything with 7-day forecast
        update daily wind value
        update daily rain value
        update daily hi/lo values
        update weather condition value
        update weather condition graphic
        update date
        TODO all that's needed is to implement the API to edit the values
            Maybe an initialization pass too -- this but for real lol
    The way to do it is to import file into main.py thread start file,
        then start an eel thread and a run() loop. They both reference the web page.

  !==!==! Current valid GUIManager functions !==!==!
    -- TODO DONE --
    update_location(location)
    search_query(query) - OUTGOING
    update_daily_rain_percent(day, percent)
    update_daily_wind(day, direction, speed)
    update_daily_hilo(day, hi, lo)
    update_daily_weather_condition_text(day, condition)
    update_daily_weather_condition_graphic(day, graphic_name)
    update_daily_date(day, date)
    update_hourly_temp(hour, temp)
    update_hourly_time(hour, time)
    update_hourly_graphic(hour, graphic)
    update_alert(visible, header, body, source)
    update_sun(sunrise, sunset, dawn, dusk)
    update_uv(uv_value)
    update_wind(speed, direction)
    update_humidity(humidity, dew)
    update_pressure(pressure)
    update_now(temp, hi, lo, condition, graphic, feels_like)

  hourly tags:
    temp_hourly_0
    condition_graphic_hourly_0
    hourly graphic container size = 72x72
    time_hourly_0



  graphics to make : width, height
    - clear/sunny          | 55x55
    - partly cloudy        | 71x60
    - haze                 | 74x55
    - fog                  | 71x61
    - windy                | 63x40
    - cloudy               | 71x44
    - thunderstorm         | 71x65
    - light rain           | 71x65
    - heavy rain           | 71x65
    - drizzle              | 71x58
    - snow                 | 61x66
    - freezing rain / hail | 71x66
    heavy snow
    clear (night)
    partly cloudy (night)
    drizzle (night)

graphics
    HOURLY - should be 55high
    DAILY - should be 55high


coords = (container - graphic)/2

Warning Service TODO
 Receives data from Frontend API
 Sends data to Frontend API


Forecast Service TODO
 Receives data from Frontend API
 Sends data to Frontend API

 API gives the following results in the "forecast" url:
    given day, given day overnight/night
    temp, precipitation%, wind/speed/direction, short forecast, detailed forecast

 General Data Needed:
    Daily
        - ShortDescription
        - Min Max
        - Rain %
        - Wind Speed + Dir
        - Sunrise Sunset Dawn Dusk
        Daily JSON Period Breakdown:
        {
            "number": 1,
            "name": "This Afternoon",
            "startTime": "2024-07-18T14:00:00-04:00",
            "endTime": "2024-07-18T18:00:00-04:00",
            "isDaytime": true,
            "temperature": 89,
            "temperatureUnit": "F",
            "temperatureTrend": "",
            "probabilityOfPrecipitation": {
              "unitCode": "wmoUnit:percent",
              "value": 30
            },
            "windSpeed": "8 mph",
            "windDirection": "N",
            "icon": "https://api.weather.gov/icons/land/day/tsra,30?size=medium",
            "shortForecast": "Isolated Showers And Thunderstorms",
            "detailedForecast": "Scattered rain showers before 5pm, then isolated showers and thunderstorms. Mostly cloudy, with a high near 89. North wind around 8 mph. Chance of precipitation is 30%."
        },
    Hourly
        - Temp
        Min Max
        - ShortDescription
        - Wind
        - Feels Like
        - UV Index
        - Humidity
        - Dew Point
        Pressure



Search Service TODO
 Receives data from Frontend API
 Sends data to frontend API






==================================================

             1    2    3    4    5    6
bg:         286, 306, 326, 266, 366, 386  | bg_daily_#
wind:       287, 307, 327, 267, 367, 387  | wind_daily_#
wind value: 288, 308, 328, 268, 368, 388  | wind_value_daily_#
wind icon:  289, 309, 329, 269, 369, 389  | wind_icon_daily_#
             6    5    4    3    2    1
rain:       393, 373, 273, 333, 313, 293  | rain_daily_#
rain value: 395, 375, 275, 335, 315, 295  | rain_value_daily_#
rain icon:  name-----                     | rain_icon_daily_#
hilo:       396, 376, 276, 336, 316, 296  | hilo_daily_#
cond text:  397, 377, 277, 337, 317, 297  | condition_text_daily_#
cond graph: 398, 378, 278, 338, 318, 298  | condition_graphic_daily_#
date:       404, 384, 284, 344, 324, 304  | date_daily_#